/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/button-toggle/button-toggle';
import * as import2 from '@angular/forms/src/directives';
import * as import3 from '@angular/forms/src/form_providers';
import * as import4 from '@angular/forms/src/directives/radio_control_value_accessor';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/render/api';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/element';
import * as import9 from '@angular/core/src/linker/view_utils';
import * as import10 from '@angular/core/src/linker/view_type';
import * as import11 from '@angular/core/src/change_detection/change_detection';
import * as import12 from '@angular/material/core/coordination/unique-selection-dispatcher';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from './button-toggle.css';
class MdButtonToggleModuleInjector extends import0.NgModuleInjector<import1.MdButtonToggleModule> {
  _InternalFormsSharedModule_0:import2.InternalFormsSharedModule;
  _FormsModule_1:import3.FormsModule;
  _MdButtonToggleModule_2:import1.MdButtonToggleModule;
  __RadioControlRegistry_3:import4.RadioControlRegistry;
  constructor(parent:import5.Injector) {
    super(parent,[],[]);
  }
  get _RadioControlRegistry_3():import4.RadioControlRegistry {
    if ((this.__RadioControlRegistry_3 == (null as any))) { (this.__RadioControlRegistry_3 = new import4.RadioControlRegistry()); }
    return this.__RadioControlRegistry_3;
  }
  createInternal():import1.MdButtonToggleModule {
    this._InternalFormsSharedModule_0 = new import2.InternalFormsSharedModule();
    this._FormsModule_1 = new import3.FormsModule();
    this._MdButtonToggleModule_2 = new import1.MdButtonToggleModule();
    return this._MdButtonToggleModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.InternalFormsSharedModule)) { return this._InternalFormsSharedModule_0; }
    if ((token === import3.FormsModule)) { return this._FormsModule_1; }
    if ((token === import1.MdButtonToggleModule)) { return this._MdButtonToggleModule_2; }
    if ((token === import4.RadioControlRegistry)) { return this._RadioControlRegistry_3; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdButtonToggleModuleNgFactory:import0.NgModuleFactory<import1.MdButtonToggleModule> = new import0.NgModuleFactory(MdButtonToggleModuleInjector,import1.MdButtonToggleModule);
var renderType_MdButtonToggle_Host:import6.RenderComponentType = (null as any);
class _View_MdButtonToggle_Host0 extends import7.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import8.AppElement;
  _MdButtonToggle_0_4:import1.MdButtonToggle;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import9.ViewUtils,parentInjector:import5.Injector,declarationEl:import8.AppElement) {
    super(_View_MdButtonToggle_Host0,renderType_MdButtonToggle_Host,import10.ViewType.HOST,viewUtils,parentInjector,declarationEl,import11.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-button-toggle',rootSelector,(null as any));
    this._appEl_0 = new import8.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdButtonToggle0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdButtonToggle_0_4 = new import1.MdButtonToggle(this.parentInjector.get(import1.MdButtonToggleGroup,(null as any)),this.parentInjector.get(import1.MdButtonToggleGroupMultiple,(null as any)),this.parentInjector.get(import12.MdUniqueSelectionDispatcher));
    this._appEl_0.initComponent(this._MdButtonToggle_0_4,[],compView_0);
    compView_0.create(this._MdButtonToggle_0_4,this.projectableNodes,(null as any));
    this._expr_0 = import11.UNINITIALIZED;
    this._expr_1 = import11.UNINITIALIZED;
    this._expr_2 = import11.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdButtonToggle) && (0 === requestNodeIndex))) { return this._MdButtonToggle_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._MdButtonToggle_0_4.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this._MdButtonToggle_0_4.id;
    if (import9.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementProperty(this._el_0,'id',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this._MdButtonToggle_0_4.checked;
    if (import9.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_0,'md-button-toggle-checked',currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this._MdButtonToggle_0_4.disabled;
    if (import9.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementClass(this._el_0,'md-button-toggle-disabled',currVal_2);
      this._expr_2 = currVal_2;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_MdButtonToggle_Host0(viewUtils:import9.ViewUtils,parentInjector:import5.Injector,declarationEl:import8.AppElement):import7.AppView<any> {
  if ((renderType_MdButtonToggle_Host === (null as any))) { (renderType_MdButtonToggle_Host = viewUtils.createRenderComponentType('',0,import13.ViewEncapsulation.None,[],{})); }
  return new _View_MdButtonToggle_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdButtonToggleNgFactory:import14.ComponentFactory<import1.MdButtonToggle> = new import14.ComponentFactory<import1.MdButtonToggle>('md-button-toggle',viewFactory_MdButtonToggle_Host0,import1.MdButtonToggle);
const styles_MdButtonToggle:any[] = [import15.styles];
var renderType_MdButtonToggle:import6.RenderComponentType = (null as any);
class _View_MdButtonToggle0 extends import7.AppView<import1.MdButtonToggle> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _text_6:any;
  _text_7:any;
  _text_8:any;
  /*private*/ _expr_0:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  constructor(viewUtils:import9.ViewUtils,parentInjector:import5.Injector,declarationEl:import8.AppElement) {
    super(_View_MdButtonToggle0,renderType_MdButtonToggle,import10.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import11.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'label',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-button-toggle-label');
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_2 = this.renderer.createElement(this._el_0,'input',(null as any));
    this.renderer.setElementAttribute(this._el_2,'class','md-button-toggle-input md-visually-hidden');
    this._text_3 = this.renderer.createText(this._el_0,'\n\n  ',(null as any));
    this._el_4 = this.renderer.createElement(this._el_0,'div',(null as any));
    this.renderer.setElementAttribute(this._el_4,'class','md-button-toggle-label-content');
    this._text_5 = this.renderer.createText(this._el_4,'\n    ',(null as any));
    this.renderer.projectNodes(this._el_4,import9.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_6 = this.renderer.createText(this._el_4,'\n  ',(null as any));
    this._text_7 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._text_8 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._expr_0 = import11.UNINITIALIZED;
    this._expr_3 = import11.UNINITIALIZED;
    this._expr_4 = import11.UNINITIALIZED;
    this._expr_5 = import11.UNINITIALIZED;
    this._expr_6 = import11.UNINITIALIZED;
    this._expr_7 = import11.UNINITIALIZED;
    var disposable_0:Function = this.renderer.listen(this._el_2,'change',this.eventHandler(this._handle_change_2_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_2,'click',this.eventHandler(this._handle_click_2_1.bind(this)));
    this.init([],[
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._text_6,
      this._text_7,
      this._text_8
    ]
    ,[
      disposable_0,
      disposable_1
    ]
    ,[]);
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this.context.inputId;
    if (import9.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementAttribute(this._el_0,'for',((currVal_0 == (null as any))? (null as any): currVal_0.toString()));
      this._expr_0 = currVal_0;
    }
    const currVal_3:any = this.context._type;
    if (import9.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setElementProperty(this._el_2,'type',currVal_3);
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context.inputId;
    if (import9.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementProperty(this._el_2,'id',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.checked;
    if (import9.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementProperty(this._el_2,'checked',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.disabled;
    if (import9.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setElementProperty(this._el_2,'disabled',currVal_6);
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this.context.name;
    if (import9.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this.renderer.setElementProperty(this._el_2,'name',currVal_7);
      this._expr_7 = currVal_7;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_change_2_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context._onInputChange($event)) !== false);
    return (true && pd_0);
  }
  private _handle_click_2_1($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context._onInputClick($event)) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_MdButtonToggle0(viewUtils:import9.ViewUtils,parentInjector:import5.Injector,declarationEl:import8.AppElement):import7.AppView<import1.MdButtonToggle> {
  if ((renderType_MdButtonToggle === (null as any))) { (renderType_MdButtonToggle = viewUtils.createRenderComponentType('',1,import13.ViewEncapsulation.None,styles_MdButtonToggle,{})); }
  return new _View_MdButtonToggle0(viewUtils,parentInjector,declarationEl);
}