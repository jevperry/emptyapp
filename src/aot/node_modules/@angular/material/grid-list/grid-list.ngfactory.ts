/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/grid-list/grid-list';
import * as import2 from '@angular/material/core/line/line';
import * as import3 from '@angular/core/src/di/injector';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/element';
import * as import7 from '@angular/core/src/linker/query_list';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/change_detection/change_detection';
import * as import11 from '@angular/core/src/linker/element_ref';
import * as import12 from '@angular/material/core/rtl/dir';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from './grid-list.css';
class MdGridListModuleInjector extends import0.NgModuleInjector<import1.MdGridListModule> {
  _MdLineModule_0:import2.MdLineModule;
  _MdGridListModule_1:import1.MdGridListModule;
  constructor(parent:import3.Injector) {
    super(parent,[],[]);
  }
  createInternal():import1.MdGridListModule {
    this._MdLineModule_0 = new import2.MdLineModule();
    this._MdGridListModule_1 = new import1.MdGridListModule();
    return this._MdGridListModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.MdLineModule)) { return this._MdLineModule_0; }
    if ((token === import1.MdGridListModule)) { return this._MdGridListModule_1; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdGridListModuleNgFactory:import0.NgModuleFactory<import1.MdGridListModule> = new import0.NgModuleFactory(MdGridListModuleInjector,import1.MdGridListModule);
var renderType_MdGridList_Host:import4.RenderComponentType = (null as any);
class _View_MdGridList_Host0 extends import5.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import6.AppElement;
  _MdGridList_0_4:import1.MdGridList;
  _query_MdGridTile_0_0:import7.QueryList<any>;
  constructor(viewUtils:import8.ViewUtils,parentInjector:import3.Injector,declarationEl:import6.AppElement) {
    super(_View_MdGridList_Host0,renderType_MdGridList_Host,import9.ViewType.HOST,viewUtils,parentInjector,declarationEl,import10.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import6.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-grid-list',rootSelector,(null as any));
    this._appEl_0 = new import6.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdGridList0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdGridList_0_4 = new import1.MdGridList(this.renderer,new import11.ElementRef(this._el_0),this.parentInjector.get(import12.Dir,(null as any)));
    this._query_MdGridTile_0_0 = new import7.QueryList<any>();
    this._appEl_0.initComponent(this._MdGridList_0_4,[],compView_0);
    compView_0.create(this._MdGridList_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdGridList) && (0 === requestNodeIndex))) { return this._MdGridList_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._MdGridList_0_4.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) {
      if (this._query_MdGridTile_0_0.dirty) {
        this._query_MdGridTile_0_0.reset([]);
        this._MdGridList_0_4._tiles = this._query_MdGridTile_0_0;
        this._query_MdGridTile_0_0.notifyOnChanges();
      }
      this._MdGridList_0_4.ngAfterContentChecked();
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_MdGridList_Host0(viewUtils:import8.ViewUtils,parentInjector:import3.Injector,declarationEl:import6.AppElement):import5.AppView<any> {
  if ((renderType_MdGridList_Host === (null as any))) { (renderType_MdGridList_Host = viewUtils.createRenderComponentType('',0,import13.ViewEncapsulation.None,[],{})); }
  return new _View_MdGridList_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdGridListNgFactory:import14.ComponentFactory<import1.MdGridList> = new import14.ComponentFactory<import1.MdGridList>('md-grid-list',viewFactory_MdGridList_Host0,import1.MdGridList);
const styles_MdGridList:any[] = [import15.styles];
var renderType_MdGridList:import4.RenderComponentType = (null as any);
class _View_MdGridList0 extends import5.AppView<import1.MdGridList> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  constructor(viewUtils:import8.ViewUtils,parentInjector:import3.Injector,declarationEl:import6.AppElement) {
    super(_View_MdGridList0,renderType_MdGridList,import9.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import10.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import6.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-grid-list');
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this.renderer.projectNodes(this._el_0,import8.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_2 = this.renderer.createText(this._el_0,'\n',(null as any));
    this.init([],[
      this._el_0,
      this._text_1,
      this._text_2
    ]
    ,[],[]);
    return (null as any);
  }
}
export function viewFactory_MdGridList0(viewUtils:import8.ViewUtils,parentInjector:import3.Injector,declarationEl:import6.AppElement):import5.AppView<import1.MdGridList> {
  if ((renderType_MdGridList === (null as any))) { (renderType_MdGridList = viewUtils.createRenderComponentType('',1,import13.ViewEncapsulation.None,styles_MdGridList,{})); }
  return new _View_MdGridList0(viewUtils,parentInjector,declarationEl);
}