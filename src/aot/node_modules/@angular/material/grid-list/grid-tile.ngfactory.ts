/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '@angular/material/grid-list/grid-tile';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './grid-list.css';
import * as import12 from '@angular/core/src/linker/query_list';
var renderType_MdGridTile_Host:import0.RenderComponentType = (null as any);
class _View_MdGridTile_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _MdGridTile_0_4:import3.MdGridTile;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdGridTile_Host0,renderType_MdGridTile_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-grid-tile',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'role','listitem');
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdGridTile0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdGridTile_0_4 = new import3.MdGridTile(this.renderer,new import8.ElementRef(this._el_0));
    this._appEl_0.initComponent(this._MdGridTile_0_4,[],compView_0);
    compView_0.create(this._MdGridTile_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.MdGridTile) && (0 === requestNodeIndex))) { return this._MdGridTile_0_4; }
    return notFoundResult;
  }
}
function viewFactory_MdGridTile_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_MdGridTile_Host === (null as any))) { (renderType_MdGridTile_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_MdGridTile_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdGridTileNgFactory:import10.ComponentFactory<import3.MdGridTile> = new import10.ComponentFactory<import3.MdGridTile>('md-grid-tile',viewFactory_MdGridTile_Host0,import3.MdGridTile);
const styles_MdGridTile:any[] = [import11.styles];
var renderType_MdGridTile:import0.RenderComponentType = (null as any);
class _View_MdGridTile0 extends import1.AppView<import3.MdGridTile> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _text_3:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdGridTile0,renderType_MdGridTile,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'figure',(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'\n  ',(null as any));
    this.renderer.projectNodes(this._el_1,import4.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_3 = this.renderer.createText(this._el_1,'\n',(null as any));
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3
    ]
    ,[],[]);
    return (null as any);
  }
}
export function viewFactory_MdGridTile0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.MdGridTile> {
  if ((renderType_MdGridTile === (null as any))) { (renderType_MdGridTile = viewUtils.createRenderComponentType('',1,import9.ViewEncapsulation.None,styles_MdGridTile,{})); }
  return new _View_MdGridTile0(viewUtils,parentInjector,declarationEl);
}
var renderType_MdGridTileText_Host:import0.RenderComponentType = (null as any);
class _View_MdGridTileText_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _MdGridTileText_0_4:import3.MdGridTileText;
  _query_MdLine_0_0:import12.QueryList<any>;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdGridTileText_Host0,renderType_MdGridTileText_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-grid-tile-header',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdGridTileText0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdGridTileText_0_4 = new import3.MdGridTileText(this.renderer,new import8.ElementRef(this._el_0));
    this._query_MdLine_0_0 = new import12.QueryList<any>();
    this._appEl_0.initComponent(this._MdGridTileText_0_4,[],compView_0);
    compView_0.create(this._MdGridTileText_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.MdGridTileText) && (0 === requestNodeIndex))) { return this._MdGridTileText_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) {
      if (this._query_MdLine_0_0.dirty) {
        this._query_MdLine_0_0.reset([]);
        this._MdGridTileText_0_4._lines = this._query_MdLine_0_0;
        this._query_MdLine_0_0.notifyOnChanges();
      }
      if ((this.numberOfChecks === 0)) { this._MdGridTileText_0_4.ngAfterContentInit(); }
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_MdGridTileText_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_MdGridTileText_Host === (null as any))) { (renderType_MdGridTileText_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_MdGridTileText_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdGridTileTextNgFactory:import10.ComponentFactory<import3.MdGridTileText> = new import10.ComponentFactory<import3.MdGridTileText>('md-grid-tile-header, md-grid-tile-footer',viewFactory_MdGridTileText_Host0,import3.MdGridTileText);
const styles_MdGridTileText:any[] = [];
var renderType_MdGridTileText:import0.RenderComponentType = (null as any);
class _View_MdGridTileText0 extends import1.AppView<import3.MdGridTileText> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdGridTileText0,renderType_MdGridTileText,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.renderer.projectNodes(parentRenderNode,import4.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','md-grid-list-text');
    this.renderer.projectNodes(this._el_1,import4.flattenNestedViewRenderNodes(this.projectableNodes[1]));
    this._text_2 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.renderer.projectNodes(parentRenderNode,import4.flattenNestedViewRenderNodes(this.projectableNodes[2]));
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2
    ]
    ,[],[]);
    return (null as any);
  }
}
export function viewFactory_MdGridTileText0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.MdGridTileText> {
  if ((renderType_MdGridTileText === (null as any))) { (renderType_MdGridTileText = viewUtils.createRenderComponentType('',3,import9.ViewEncapsulation.None,styles_MdGridTileText,{})); }
  return new _View_MdGridTileText0(viewUtils,parentInjector,declarationEl);
}