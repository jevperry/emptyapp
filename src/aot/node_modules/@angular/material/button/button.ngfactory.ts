/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/button/button';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/ripple/ripple';
import * as import4 from '@angular/common/src/localization';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/i18n/tokens';
import * as import7 from '@angular/core/src/render/api';
import * as import8 from '@angular/core/src/linker/view';
import * as import9 from '@angular/core/src/linker/element';
import * as import10 from '@angular/core/src/linker/view_utils';
import * as import11 from '@angular/core/src/linker/view_type';
import * as import12 from '@angular/core/src/change_detection/change_detection';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/core/src/metadata/view';
import * as import15 from '@angular/core/src/linker/component_factory';
import * as import16 from './button.css';
import * as import17 from '@angular/common/src/directives/ng_if';
import * as import18 from '@angular/core/src/linker/template_ref';
class MdButtonModuleInjector extends import0.NgModuleInjector<import1.MdButtonModule> {
  _CommonModule_0:import2.CommonModule;
  _MdRippleModule_1:import3.MdRippleModule;
  _MdButtonModule_2:import1.MdButtonModule;
  __NgLocalization_3:import4.NgLocaleLocalization;
  constructor(parent:import5.Injector) {
    super(parent,[],[]);
  }
  get _NgLocalization_3():import4.NgLocaleLocalization {
    if ((this.__NgLocalization_3 == (null as any))) { (this.__NgLocalization_3 = new import4.NgLocaleLocalization(this.parent.get(import6.LOCALE_ID))); }
    return this.__NgLocalization_3;
  }
  createInternal():import1.MdButtonModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._MdRippleModule_1 = new import3.MdRippleModule();
    this._MdButtonModule_2 = new import1.MdButtonModule();
    return this._MdButtonModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import3.MdRippleModule)) { return this._MdRippleModule_1; }
    if ((token === import1.MdButtonModule)) { return this._MdButtonModule_2; }
    if ((token === import4.NgLocalization)) { return this._NgLocalization_3; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdButtonModuleNgFactory:import0.NgModuleFactory<import1.MdButtonModule> = new import0.NgModuleFactory(MdButtonModuleInjector,import1.MdButtonModule);
var renderType_MdButton_Host:import7.RenderComponentType = (null as any);
class _View_MdButton_Host0 extends import8.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import9.AppElement;
  _MdButton_0_4:import1.MdButton;
  /*private*/ _expr_3:any;
  constructor(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement) {
    super(_View_MdButton_Host0,renderType_MdButton_Host,import11.ViewType.HOST,viewUtils,parentInjector,declarationEl,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.AppElement {
    this._el_0 = this.selectOrCreateHostElement('button',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'md-button','');
    this._appEl_0 = new import9.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdButton0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdButton_0_4 = new import1.MdButton(new import13.ElementRef(this._el_0),this.renderer);
    this._appEl_0.initComponent(this._MdButton_0_4,[],compView_0);
    compView_0.create(this._MdButton_0_4,this.projectableNodes,(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_0,'mousedown',this.eventHandler(this._handle_mousedown_0_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_0,'focus',this.eventHandler(this._handle_focus_0_1.bind(this)));
    var disposable_2:Function = this.renderer.listen(this._el_0,'blur',this.eventHandler(this._handle_blur_0_2.bind(this)));
    this._expr_3 = import12.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[
      disposable_0,
      disposable_1,
      disposable_2
    ]
    ,[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdButton) && (0 === requestNodeIndex))) { return this._MdButton_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_3:any = this._MdButton_0_4._isKeyboardFocused;
    if (import10.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setElementClass(this._el_0,'md-button-focus',currVal_3);
      this._expr_3 = currVal_3;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_mousedown_0_0($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdButton_0_4._setMousedown()) !== false);
    return (true && pd_0);
  }
  private _handle_focus_0_1($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdButton_0_4._setKeyboardFocus()) !== false);
    return (true && pd_0);
  }
  private _handle_blur_0_2($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdButton_0_4._removeKeyboardFocus()) !== false);
    return (true && pd_0);
  }
}
function viewFactory_MdButton_Host0(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement):import8.AppView<any> {
  if ((renderType_MdButton_Host === (null as any))) { (renderType_MdButton_Host = viewUtils.createRenderComponentType('',0,import14.ViewEncapsulation.None,[],{})); }
  return new _View_MdButton_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdButtonNgFactory:import15.ComponentFactory<import1.MdButton> = new import15.ComponentFactory<import1.MdButton>('button[md-button], button[md-raised-button], button[md-icon-button], button[md-fab], button[md-mini-fab]',viewFactory_MdButton_Host0,import1.MdButton);
const styles_MdButton:any[] = [import16.styles];
var renderType_MdButton:import7.RenderComponentType = (null as any);
class _View_MdButton0 extends import8.AppView<import1.MdButton> {
  _el_0:any;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _appEl_2:import9.AppElement;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import17.NgIf;
  _text_3:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement) {
    super(_View_MdButton0,renderType_MdButton,import11.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import12.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import9.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'span',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-button-wrapper');
    this.renderer.projectNodes(this._el_0,import10.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_1 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._appEl_2 = new import9.AppElement(2,(null as any),this,this._anchor_2);
    this._TemplateRef_2_5 = new import18.TemplateRef_(this._appEl_2,viewFactory_MdButton1);
    this._NgIf_2_6 = new import17.NgIf(this._appEl_2.vcRef,this._TemplateRef_2_5);
    this._text_3 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._expr_0 = import12.UNINITIALIZED;
    this.init([],[
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3
    ]
    ,[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import17.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this.context.isRippleEnabled();
    if (import10.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._NgIf_2_6.ngIf = currVal_0;
      this._expr_0 = currVal_0;
    }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_MdButton0(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement):import8.AppView<import1.MdButton> {
  if ((renderType_MdButton === (null as any))) { (renderType_MdButton = viewUtils.createRenderComponentType('',1,import14.ViewEncapsulation.None,styles_MdButton,{})); }
  return new _View_MdButton0(viewUtils,parentInjector,declarationEl);
}
class _View_MdButton1 extends import8.AppView<any> {
  _el_0:any;
  _MdRipple_0_3:import3.MdRipple;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  constructor(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement) {
    super(_View_MdButton1,renderType_MdButton,import11.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-button-ripple');
    this.renderer.setElementAttribute(this._el_0,'md-ripple','');
    this.renderer.setElementAttribute(this._el_0,'md-ripple-background-color','rgba(0, 0, 0, 0)');
    this._MdRipple_0_3 = new import3.MdRipple(new import13.ElementRef(this._el_0));
    this._expr_0 = import12.UNINITIALIZED;
    this._expr_1 = import12.UNINITIALIZED;
    this._expr_2 = import12.UNINITIALIZED;
    this._expr_3 = import12.UNINITIALIZED;
    this._expr_4 = import12.UNINITIALIZED;
    this._expr_5 = import12.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.MdRipple) && (0 === requestNodeIndex))) { return this._MdRipple_0_3; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    var changes:{[key: string]:import12.SimpleChange} = (null as any);
    changes = (null as any);
    const currVal_1:any = this.parent.context.getHostElement();
    if (import10.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this._MdRipple_0_3.trigger = currVal_1;
      if ((changes === (null as any))) { (changes = {}); }
      changes['trigger'] = new import12.SimpleChange(this._expr_1,currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = (this.parent.context.isRoundButton()? 'rgba(255, 255, 255, 0.2)': '');
    if (import10.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this._MdRipple_0_3.color = currVal_2;
      if ((changes === (null as any))) { (changes = {}); }
      changes['color'] = new import12.SimpleChange(this._expr_2,currVal_2);
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = 'rgba(0, 0, 0, 0)';
    if (import10.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this._MdRipple_0_3.backgroundColor = currVal_3;
      if ((changes === (null as any))) { (changes = {}); }
      changes['backgroundColor'] = new import12.SimpleChange(this._expr_3,currVal_3);
      this._expr_3 = currVal_3;
    }
    if ((changes !== (null as any))) { this._MdRipple_0_3.ngOnChanges(changes); }
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._MdRipple_0_3.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this.parent.context.isRoundButton();
    if (import10.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'md-button-ripple-round',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_4:any = this._MdRipple_0_3.focused;
    if (import10.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementClass(this._el_0,'md-ripple-focused',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this._MdRipple_0_3.unbounded;
    if (import10.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementClass(this._el_0,'md-ripple-unbounded',currVal_5);
      this._expr_5 = currVal_5;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._MdRipple_0_3.ngOnDestroy();
  }
}
function viewFactory_MdButton1(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement):import8.AppView<any> {
  return new _View_MdButton1(viewUtils,parentInjector,declarationEl);
}
var renderType_MdAnchor_Host:import7.RenderComponentType = (null as any);
class _View_MdAnchor_Host0 extends import8.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import9.AppElement;
  _MdAnchor_0_4:import1.MdAnchor;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  constructor(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement) {
    super(_View_MdAnchor_Host0,renderType_MdAnchor_Host,import11.ViewType.HOST,viewUtils,parentInjector,declarationEl,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.AppElement {
    this._el_0 = this.selectOrCreateHostElement('a',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'md-button','');
    this._appEl_0 = new import9.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdAnchor0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdAnchor_0_4 = new import1.MdAnchor(new import13.ElementRef(this._el_0),this.renderer);
    this._appEl_0.initComponent(this._MdAnchor_0_4,[],compView_0);
    compView_0.create(this._MdAnchor_0_4,this.projectableNodes,(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_0,'mousedown',this.eventHandler(this._handle_mousedown_0_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_0,'focus',this.eventHandler(this._handle_focus_0_1.bind(this)));
    var disposable_2:Function = this.renderer.listen(this._el_0,'blur',this.eventHandler(this._handle_blur_0_2.bind(this)));
    var disposable_3:Function = this.renderer.listen(this._el_0,'click',this.eventHandler(this._handle_click_0_3.bind(this)));
    this._expr_4 = import12.UNINITIALIZED;
    this._expr_5 = import12.UNINITIALIZED;
    this._expr_6 = import12.UNINITIALIZED;
    this._expr_7 = import12.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3
    ]
    ,[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdAnchor) && (0 === requestNodeIndex))) { return this._MdAnchor_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_4:any = this._MdAnchor_0_4._isKeyboardFocused;
    if (import10.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementClass(this._el_0,'md-button-focus',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this._MdAnchor_0_4.tabIndex;
    if (import10.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementProperty(this._el_0,'tabIndex',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this._MdAnchor_0_4.isAriaDisabled;
    if (import10.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setElementAttribute(this._el_0,'aria-disabled',((currVal_6 == (null as any))? (null as any): currVal_6.toString()));
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this._MdAnchor_0_4.disabled;
    if (import10.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this.renderer.setElementAttribute(this._el_0,'disabled',((currVal_7 == (null as any))? (null as any): currVal_7.toString()));
      this._expr_7 = currVal_7;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_mousedown_0_0($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdAnchor_0_4._setMousedown()) !== false);
    return (true && pd_0);
  }
  private _handle_focus_0_1($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdAnchor_0_4._setKeyboardFocus()) !== false);
    return (true && pd_0);
  }
  private _handle_blur_0_2($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdAnchor_0_4._removeKeyboardFocus()) !== false);
    return (true && pd_0);
  }
  private _handle_click_0_3($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdAnchor_0_4._haltDisabledEvents($event)) !== false);
    return (true && pd_0);
  }
}
function viewFactory_MdAnchor_Host0(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement):import8.AppView<any> {
  if ((renderType_MdAnchor_Host === (null as any))) { (renderType_MdAnchor_Host = viewUtils.createRenderComponentType('',0,import14.ViewEncapsulation.None,[],{})); }
  return new _View_MdAnchor_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdAnchorNgFactory:import15.ComponentFactory<import1.MdAnchor> = new import15.ComponentFactory<import1.MdAnchor>('a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',viewFactory_MdAnchor_Host0,import1.MdAnchor);
const styles_MdAnchor:any[] = [import16.styles];
var renderType_MdAnchor:import7.RenderComponentType = (null as any);
class _View_MdAnchor0 extends import8.AppView<import1.MdAnchor> {
  _el_0:any;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _appEl_2:import9.AppElement;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import17.NgIf;
  _text_3:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement) {
    super(_View_MdAnchor0,renderType_MdAnchor,import11.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'span',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-button-wrapper');
    this.renderer.projectNodes(this._el_0,import10.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_1 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._appEl_2 = new import9.AppElement(2,(null as any),this,this._anchor_2);
    this._TemplateRef_2_5 = new import18.TemplateRef_(this._appEl_2,viewFactory_MdAnchor1);
    this._NgIf_2_6 = new import17.NgIf(this._appEl_2.vcRef,this._TemplateRef_2_5);
    this._text_3 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._expr_0 = import12.UNINITIALIZED;
    this.init([],[
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3
    ]
    ,[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import17.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this.context.isRippleEnabled();
    if (import10.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._NgIf_2_6.ngIf = currVal_0;
      this._expr_0 = currVal_0;
    }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_MdAnchor0(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement):import8.AppView<import1.MdAnchor> {
  if ((renderType_MdAnchor === (null as any))) { (renderType_MdAnchor = viewUtils.createRenderComponentType('',1,import14.ViewEncapsulation.None,styles_MdAnchor,{})); }
  return new _View_MdAnchor0(viewUtils,parentInjector,declarationEl);
}
class _View_MdAnchor1 extends import8.AppView<any> {
  _el_0:any;
  _MdRipple_0_3:import3.MdRipple;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  constructor(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement) {
    super(_View_MdAnchor1,renderType_MdAnchor,import11.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-button-ripple');
    this.renderer.setElementAttribute(this._el_0,'md-ripple','');
    this.renderer.setElementAttribute(this._el_0,'md-ripple-background-color','rgba(0, 0, 0, 0)');
    this._MdRipple_0_3 = new import3.MdRipple(new import13.ElementRef(this._el_0));
    this._expr_0 = import12.UNINITIALIZED;
    this._expr_1 = import12.UNINITIALIZED;
    this._expr_2 = import12.UNINITIALIZED;
    this._expr_3 = import12.UNINITIALIZED;
    this._expr_4 = import12.UNINITIALIZED;
    this._expr_5 = import12.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.MdRipple) && (0 === requestNodeIndex))) { return this._MdRipple_0_3; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    var changes:{[key: string]:import12.SimpleChange} = (null as any);
    changes = (null as any);
    const currVal_1:any = this.parent.context.getHostElement();
    if (import10.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this._MdRipple_0_3.trigger = currVal_1;
      if ((changes === (null as any))) { (changes = {}); }
      changes['trigger'] = new import12.SimpleChange(this._expr_1,currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = (this.parent.context.isRoundButton()? 'rgba(255, 255, 255, 0.2)': '');
    if (import10.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this._MdRipple_0_3.color = currVal_2;
      if ((changes === (null as any))) { (changes = {}); }
      changes['color'] = new import12.SimpleChange(this._expr_2,currVal_2);
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = 'rgba(0, 0, 0, 0)';
    if (import10.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this._MdRipple_0_3.backgroundColor = currVal_3;
      if ((changes === (null as any))) { (changes = {}); }
      changes['backgroundColor'] = new import12.SimpleChange(this._expr_3,currVal_3);
      this._expr_3 = currVal_3;
    }
    if ((changes !== (null as any))) { this._MdRipple_0_3.ngOnChanges(changes); }
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._MdRipple_0_3.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this.parent.context.isRoundButton();
    if (import10.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'md-button-ripple-round',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_4:any = this._MdRipple_0_3.focused;
    if (import10.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementClass(this._el_0,'md-ripple-focused',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this._MdRipple_0_3.unbounded;
    if (import10.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementClass(this._el_0,'md-ripple-unbounded',currVal_5);
      this._expr_5 = currVal_5;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._MdRipple_0_3.ngOnDestroy();
  }
}
function viewFactory_MdAnchor1(viewUtils:import10.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement):import8.AppView<any> {
  return new _View_MdAnchor1(viewUtils,parentInjector,declarationEl);
}