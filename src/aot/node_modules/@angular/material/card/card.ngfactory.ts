/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/card/card';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/render/api';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './card.css';
class MdCardModuleInjector extends import0.NgModuleInjector<import1.MdCardModule> {
  _MdCardModule_0:import1.MdCardModule;
  constructor(parent:import2.Injector) {
    super(parent,[],[]);
  }
  createInternal():import1.MdCardModule {
    this._MdCardModule_0 = new import1.MdCardModule();
    return this._MdCardModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.MdCardModule)) { return this._MdCardModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdCardModuleNgFactory:import0.NgModuleFactory<import1.MdCardModule> = new import0.NgModuleFactory(MdCardModuleInjector,import1.MdCardModule);
var renderType_MdCard_Host:import3.RenderComponentType = (null as any);
class _View_MdCard_Host0 extends import4.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _MdCard_0_4:import1.MdCard;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdCard_Host0,renderType_MdCard_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-card',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdCard0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdCard_0_4 = new import1.MdCard();
    this._appEl_0.initComponent(this._MdCard_0_4,[],compView_0);
    compView_0.create(this._MdCard_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdCard) && (0 === requestNodeIndex))) { return this._MdCard_0_4; }
    return notFoundResult;
  }
}
function viewFactory_MdCard_Host0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<any> {
  if ((renderType_MdCard_Host === (null as any))) { (renderType_MdCard_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_MdCard_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdCardNgFactory:import10.ComponentFactory<import1.MdCard> = new import10.ComponentFactory<import1.MdCard>('md-card',viewFactory_MdCard_Host0,import1.MdCard);
const styles_MdCard:any[] = [import11.styles];
var renderType_MdCard:import3.RenderComponentType = (null as any);
class _View_MdCard0 extends import4.AppView<import1.MdCard> {
  _text_0:any;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdCard0,renderType_MdCard,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.renderer.projectNodes(parentRenderNode,import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.init([],[this._text_0],[],[]);
    return (null as any);
  }
}
export function viewFactory_MdCard0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<import1.MdCard> {
  if ((renderType_MdCard === (null as any))) { (renderType_MdCard = viewUtils.createRenderComponentType('',1,import9.ViewEncapsulation.None,styles_MdCard,{})); }
  return new _View_MdCard0(viewUtils,parentInjector,declarationEl);
}
var renderType_MdCardHeader_Host:import3.RenderComponentType = (null as any);
class _View_MdCardHeader_Host0 extends import4.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _MdCardHeader_0_4:import1.MdCardHeader;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdCardHeader_Host0,renderType_MdCardHeader_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-card-header',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdCardHeader0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdCardHeader_0_4 = new import1.MdCardHeader();
    this._appEl_0.initComponent(this._MdCardHeader_0_4,[],compView_0);
    compView_0.create(this._MdCardHeader_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdCardHeader) && (0 === requestNodeIndex))) { return this._MdCardHeader_0_4; }
    return notFoundResult;
  }
}
function viewFactory_MdCardHeader_Host0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<any> {
  if ((renderType_MdCardHeader_Host === (null as any))) { (renderType_MdCardHeader_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_MdCardHeader_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdCardHeaderNgFactory:import10.ComponentFactory<import1.MdCardHeader> = new import10.ComponentFactory<import1.MdCardHeader>('md-card-header',viewFactory_MdCardHeader_Host0,import1.MdCardHeader);
const styles_MdCardHeader:any[] = [];
var renderType_MdCardHeader:import3.RenderComponentType = (null as any);
class _View_MdCardHeader0 extends import4.AppView<import1.MdCardHeader> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _text_3:any;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdCardHeader0,renderType_MdCardHeader,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.renderer.projectNodes(parentRenderNode,import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','md-card-header-text');
    this._text_2 = this.renderer.createText(this._el_1,'\n  ',(null as any));
    this.renderer.projectNodes(this._el_1,import6.flattenNestedViewRenderNodes(this.projectableNodes[1]));
    this._text_3 = this.renderer.createText(this._el_1,'\n',(null as any));
    this._text_4 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.renderer.projectNodes(parentRenderNode,import6.flattenNestedViewRenderNodes(this.projectableNodes[2]));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3,
      this._text_4,
      this._text_5
    ]
    ,[],[]);
    return (null as any);
  }
}
export function viewFactory_MdCardHeader0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<import1.MdCardHeader> {
  if ((renderType_MdCardHeader === (null as any))) { (renderType_MdCardHeader = viewUtils.createRenderComponentType('',3,import9.ViewEncapsulation.None,styles_MdCardHeader,{})); }
  return new _View_MdCardHeader0(viewUtils,parentInjector,declarationEl);
}
var renderType_MdCardTitleGroup_Host:import3.RenderComponentType = (null as any);
class _View_MdCardTitleGroup_Host0 extends import4.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _MdCardTitleGroup_0_4:import1.MdCardTitleGroup;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdCardTitleGroup_Host0,renderType_MdCardTitleGroup_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-card-title-group',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdCardTitleGroup0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdCardTitleGroup_0_4 = new import1.MdCardTitleGroup();
    this._appEl_0.initComponent(this._MdCardTitleGroup_0_4,[],compView_0);
    compView_0.create(this._MdCardTitleGroup_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdCardTitleGroup) && (0 === requestNodeIndex))) { return this._MdCardTitleGroup_0_4; }
    return notFoundResult;
  }
}
function viewFactory_MdCardTitleGroup_Host0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<any> {
  if ((renderType_MdCardTitleGroup_Host === (null as any))) { (renderType_MdCardTitleGroup_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_MdCardTitleGroup_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdCardTitleGroupNgFactory:import10.ComponentFactory<import1.MdCardTitleGroup> = new import10.ComponentFactory<import1.MdCardTitleGroup>('md-card-title-group',viewFactory_MdCardTitleGroup_Host0,import1.MdCardTitleGroup);
const styles_MdCardTitleGroup:any[] = [];
var renderType_MdCardTitleGroup:import3.RenderComponentType = (null as any);
class _View_MdCardTitleGroup0 extends import4.AppView<import1.MdCardTitleGroup> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  _text_3:any;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdCardTitleGroup0,renderType_MdCardTitleGroup,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this.renderer.projectNodes(this._el_0,import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_2 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._text_3 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.renderer.projectNodes(parentRenderNode,import6.flattenNestedViewRenderNodes(this.projectableNodes[1]));
    this._text_4 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.renderer.projectNodes(parentRenderNode,import6.flattenNestedViewRenderNodes(this.projectableNodes[2]));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.init([],[
      this._el_0,
      this._text_1,
      this._text_2,
      this._text_3,
      this._text_4,
      this._text_5
    ]
    ,[],[]);
    return (null as any);
  }
}
export function viewFactory_MdCardTitleGroup0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<import1.MdCardTitleGroup> {
  if ((renderType_MdCardTitleGroup === (null as any))) { (renderType_MdCardTitleGroup = viewUtils.createRenderComponentType('',3,import9.ViewEncapsulation.None,styles_MdCardTitleGroup,{})); }
  return new _View_MdCardTitleGroup0(viewUtils,parentInjector,declarationEl);
}