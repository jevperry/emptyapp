/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/progress-circle/progress-circle';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/render/api';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './progress-circle.css.shim';
class MdProgressCircleModuleInjector extends import0.NgModuleInjector<import1.MdProgressCircleModule> {
  _MdProgressCircleModule_0:import1.MdProgressCircleModule;
  constructor(parent:import2.Injector) {
    super(parent,[],[]);
  }
  createInternal():import1.MdProgressCircleModule {
    this._MdProgressCircleModule_0 = new import1.MdProgressCircleModule();
    return this._MdProgressCircleModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.MdProgressCircleModule)) { return this._MdProgressCircleModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdProgressCircleModuleNgFactory:import0.NgModuleFactory<import1.MdProgressCircleModule> = new import0.NgModuleFactory(MdProgressCircleModuleInjector,import1.MdProgressCircleModule);
var renderType_MdProgressCircle_Host:import3.RenderComponentType = (null as any);
class _View_MdProgressCircle_Host0 extends import4.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _MdProgressCircle_0_4:import1.MdProgressCircle;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdProgressCircle_Host0,renderType_MdProgressCircle_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-progress-circle',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'role','progressbar');
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdProgressCircle0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdProgressCircle_0_4 = new import1.MdProgressCircle(compView_0.ref);
    this._appEl_0.initComponent(this._MdProgressCircle_0_4,[],compView_0);
    compView_0.create(this._MdProgressCircle_0_4,this.projectableNodes,(null as any));
    this._expr_0 = import8.UNINITIALIZED;
    this._expr_1 = import8.UNINITIALIZED;
    this._expr_2 = import8.UNINITIALIZED;
    this._expr_3 = import8.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdProgressCircle) && (0 === requestNodeIndex))) { return this._MdProgressCircle_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this._MdProgressCircle_0_4._ariaValueMin;
    if (import6.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementAttribute(this._el_0,'aria-valuemin',((currVal_0 == (null as any))? (null as any): currVal_0.toString()));
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this._MdProgressCircle_0_4._ariaValueMax;
    if (import6.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementAttribute(this._el_0,'aria-valuemax',((currVal_1 == (null as any))? (null as any): currVal_1.toString()));
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this._MdProgressCircle_0_4.value;
    if (import6.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementAttribute(this._el_0,'aria-valuenow',((currVal_2 == (null as any))? (null as any): currVal_2.toString()));
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this._MdProgressCircle_0_4.mode;
    if (import6.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setElementAttribute(this._el_0,'mode',((currVal_3 == (null as any))? (null as any): currVal_3.toString()));
      this._expr_3 = currVal_3;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._MdProgressCircle_0_4.ngOnDestroy();
  }
}
function viewFactory_MdProgressCircle_Host0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<any> {
  if ((renderType_MdProgressCircle_Host === (null as any))) { (renderType_MdProgressCircle_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_MdProgressCircle_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdProgressCircleNgFactory:import10.ComponentFactory<import1.MdProgressCircle> = new import10.ComponentFactory<import1.MdProgressCircle>('md-progress-circle',viewFactory_MdProgressCircle_Host0,import1.MdProgressCircle);
const styles_MdProgressCircle:any[] = [import11.styles];
var renderType_MdProgressCircle:import3.RenderComponentType = (null as any);
class _View_MdProgressCircle0 extends import4.AppView<import1.MdProgressCircle> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdProgressCircle0,renderType_MdProgressCircle,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,':svg:svg',(null as any));
    this.renderer.setElementAttribute(this._el_1,'preserveAspectRatio','xMidYMid meet');
    this.renderer.setElementAttribute(this._el_1,'viewBox','0 0 100 100');
    this._text_2 = this.renderer.createText(this._el_1,'\n  ',(null as any));
    this._el_3 = this.renderer.createElement(this._el_1,':svg:path',(null as any));
    this._text_4 = this.renderer.createText(this._el_1,'\n',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._expr_0 = import8.UNINITIALIZED;
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5
    ]
    ,[],[]);
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this.context.currentPath;
    if (import6.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementAttribute(this._el_3,'d',((currVal_0 == (null as any))? (null as any): currVal_0.toString()));
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_MdProgressCircle0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<import1.MdProgressCircle> {
  if ((renderType_MdProgressCircle === (null as any))) { (renderType_MdProgressCircle = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.Emulated,styles_MdProgressCircle,{})); }
  return new _View_MdProgressCircle0(viewUtils,parentInjector,declarationEl);
}
var renderType_MdSpinner_Host:import3.RenderComponentType = (null as any);
class _View_MdSpinner_Host0 extends import4.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _MdSpinner_0_4:import1.MdSpinner;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdSpinner_Host0,renderType_MdSpinner_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-spinner',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'mode','indeterminate');
    this.renderer.setElementAttribute(this._el_0,'role','progressbar');
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdSpinner0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdSpinner_0_4 = new import1.MdSpinner(compView_0.ref);
    this._appEl_0.initComponent(this._MdSpinner_0_4,[],compView_0);
    compView_0.create(this._MdSpinner_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdSpinner) && (0 === requestNodeIndex))) { return this._MdSpinner_0_4; }
    return notFoundResult;
  }
}
function viewFactory_MdSpinner_Host0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<any> {
  if ((renderType_MdSpinner_Host === (null as any))) { (renderType_MdSpinner_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_MdSpinner_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdSpinnerNgFactory:import10.ComponentFactory<import1.MdSpinner> = new import10.ComponentFactory<import1.MdSpinner>('md-spinner',viewFactory_MdSpinner_Host0,import1.MdSpinner);
const styles_MdSpinner:any[] = [import11.styles];
var renderType_MdSpinner:import3.RenderComponentType = (null as any);
class _View_MdSpinner0 extends import4.AppView<import1.MdSpinner> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdSpinner0,renderType_MdSpinner,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,':svg:svg',(null as any));
    this.renderer.setElementAttribute(this._el_1,'preserveAspectRatio','xMidYMid meet');
    this.renderer.setElementAttribute(this._el_1,'viewBox','0 0 100 100');
    this._text_2 = this.renderer.createText(this._el_1,'\n  ',(null as any));
    this._el_3 = this.renderer.createElement(this._el_1,':svg:path',(null as any));
    this._text_4 = this.renderer.createText(this._el_1,'\n',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._expr_0 = import8.UNINITIALIZED;
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5
    ]
    ,[],[]);
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this.context.currentPath;
    if (import6.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementAttribute(this._el_3,'d',((currVal_0 == (null as any))? (null as any): currVal_0.toString()));
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_MdSpinner0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<import1.MdSpinner> {
  if ((renderType_MdSpinner === (null as any))) { (renderType_MdSpinner = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.Emulated,styles_MdSpinner,{})); }
  return new _View_MdSpinner0(viewUtils,parentInjector,declarationEl);
}