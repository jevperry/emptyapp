/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/toolbar/toolbar';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/render/api';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
import * as import12 from './toolbar.css';
class MdToolbarModuleInjector extends import0.NgModuleInjector<import1.MdToolbarModule> {
  _MdToolbarModule_0:import1.MdToolbarModule;
  constructor(parent:import2.Injector) {
    super(parent,[],[]);
  }
  createInternal():import1.MdToolbarModule {
    this._MdToolbarModule_0 = new import1.MdToolbarModule();
    return this._MdToolbarModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.MdToolbarModule)) { return this._MdToolbarModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdToolbarModuleNgFactory:import0.NgModuleFactory<import1.MdToolbarModule> = new import0.NgModuleFactory(MdToolbarModuleInjector,import1.MdToolbarModule);
var renderType_MdToolbar_Host:import3.RenderComponentType = (null as any);
class _View_MdToolbar_Host0 extends import4.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _MdToolbar_0_4:import1.MdToolbar;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdToolbar_Host0,renderType_MdToolbar_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-toolbar',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdToolbar0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdToolbar_0_4 = new import1.MdToolbar(new import9.ElementRef(this._el_0),this.renderer);
    this._appEl_0.initComponent(this._MdToolbar_0_4,[],compView_0);
    compView_0.create(this._MdToolbar_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdToolbar) && (0 === requestNodeIndex))) { return this._MdToolbar_0_4; }
    return notFoundResult;
  }
}
function viewFactory_MdToolbar_Host0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<any> {
  if ((renderType_MdToolbar_Host === (null as any))) { (renderType_MdToolbar_Host = viewUtils.createRenderComponentType('',0,import10.ViewEncapsulation.None,[],{})); }
  return new _View_MdToolbar_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdToolbarNgFactory:import11.ComponentFactory<import1.MdToolbar> = new import11.ComponentFactory<import1.MdToolbar>('md-toolbar',viewFactory_MdToolbar_Host0,import1.MdToolbar);
const styles_MdToolbar:any[] = [import12.styles];
var renderType_MdToolbar:import3.RenderComponentType = (null as any);
class _View_MdToolbar0 extends import4.AppView<import1.MdToolbar> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _MdToolbarRow_2_3:import1.MdToolbarRow;
  _text_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  constructor(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement) {
    super(_View_MdToolbar0,renderType_MdToolbar,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-toolbar-layout');
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_2 = this.renderer.createElement(this._el_0,'md-toolbar-row',(null as any));
    this._MdToolbarRow_2_3 = new import1.MdToolbarRow();
    this._text_3 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this.renderer.projectNodes(this._el_2,import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_4 = this.renderer.createText(this._el_2,'\n  ',(null as any));
    this._text_5 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this.renderer.projectNodes(this._el_0,import6.flattenNestedViewRenderNodes(this.projectableNodes[1]));
    this._text_6 = this.renderer.createText(this._el_0,'\n',(null as any));
    this.init([],[
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._text_4,
      this._text_5,
      this._text_6
    ]
    ,[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdToolbarRow) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._MdToolbarRow_2_3; }
    return notFoundResult;
  }
}
export function viewFactory_MdToolbar0(viewUtils:import6.ViewUtils,parentInjector:import2.Injector,declarationEl:import5.AppElement):import4.AppView<import1.MdToolbar> {
  if ((renderType_MdToolbar === (null as any))) { (renderType_MdToolbar = viewUtils.createRenderComponentType('',2,import10.ViewEncapsulation.None,styles_MdToolbar,{})); }
  return new _View_MdToolbar0(viewUtils,parentInjector,declarationEl);
}