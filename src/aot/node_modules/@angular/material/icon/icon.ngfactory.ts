/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/icon/icon';
import * as import2 from '@angular/http/src/http_module';
import * as import3 from '@angular/http/src/backends/browser_xhr';
import * as import4 from '@angular/http/src/base_response_options';
import * as import5 from '@angular/http/src/backends/xhr_backend';
import * as import6 from '@angular/http/src/base_request_options';
import * as import7 from '@angular/core/src/di/injector';
import * as import8 from '@angular/http/src/interfaces';
import * as import9 from '@angular/http/src/http';
import * as import10 from '@angular/core/src/render/api';
import * as import11 from '@angular/core/src/linker/view';
import * as import12 from '@angular/core/src/linker/element';
import * as import13 from '@angular/core/src/linker/view_utils';
import * as import14 from '@angular/core/src/linker/view_type';
import * as import15 from '@angular/core/src/change_detection/change_detection';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from '@angular/material/icon/icon-registry';
import * as import18 from '@angular/core/src/metadata/view';
import * as import19 from '@angular/core/src/linker/component_factory';
import * as import20 from './icon.css';
class MdIconModuleInjector extends import0.NgModuleInjector<import1.MdIconModule> {
  _HttpModule_0:import2.HttpModule;
  _MdIconModule_1:import1.MdIconModule;
  __BrowserXhr_2:import3.BrowserXhr;
  __ResponseOptions_3:import4.BaseResponseOptions;
  __XSRFStrategy_4:any;
  __XHRBackend_5:import5.XHRBackend;
  __RequestOptions_6:import6.BaseRequestOptions;
  __Http_7:any;
  constructor(parent:import7.Injector) {
    super(parent,[],[]);
  }
  get _BrowserXhr_2():import3.BrowserXhr {
    if ((this.__BrowserXhr_2 == (null as any))) { (this.__BrowserXhr_2 = new import3.BrowserXhr()); }
    return this.__BrowserXhr_2;
  }
  get _ResponseOptions_3():import4.BaseResponseOptions {
    if ((this.__ResponseOptions_3 == (null as any))) { (this.__ResponseOptions_3 = new import4.BaseResponseOptions()); }
    return this.__ResponseOptions_3;
  }
  get _XSRFStrategy_4():any {
    if ((this.__XSRFStrategy_4 == (null as any))) { (this.__XSRFStrategy_4 = import2._createDefaultCookieXSRFStrategy()); }
    return this.__XSRFStrategy_4;
  }
  get _XHRBackend_5():import5.XHRBackend {
    if ((this.__XHRBackend_5 == (null as any))) { (this.__XHRBackend_5 = new import5.XHRBackend(this._BrowserXhr_2,this._ResponseOptions_3,this._XSRFStrategy_4)); }
    return this.__XHRBackend_5;
  }
  get _RequestOptions_6():import6.BaseRequestOptions {
    if ((this.__RequestOptions_6 == (null as any))) { (this.__RequestOptions_6 = new import6.BaseRequestOptions()); }
    return this.__RequestOptions_6;
  }
  get _Http_7():any {
    if ((this.__Http_7 == (null as any))) { (this.__Http_7 = import2.httpFactory(this._XHRBackend_5,this._RequestOptions_6)); }
    return this.__Http_7;
  }
  createInternal():import1.MdIconModule {
    this._HttpModule_0 = new import2.HttpModule();
    this._MdIconModule_1 = new import1.MdIconModule();
    return this._MdIconModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.HttpModule)) { return this._HttpModule_0; }
    if ((token === import1.MdIconModule)) { return this._MdIconModule_1; }
    if ((token === import3.BrowserXhr)) { return this._BrowserXhr_2; }
    if ((token === import4.ResponseOptions)) { return this._ResponseOptions_3; }
    if ((token === import8.XSRFStrategy)) { return this._XSRFStrategy_4; }
    if ((token === import5.XHRBackend)) { return this._XHRBackend_5; }
    if ((token === import6.RequestOptions)) { return this._RequestOptions_6; }
    if ((token === import9.Http)) { return this._Http_7; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdIconModuleNgFactory:import0.NgModuleFactory<import1.MdIconModule> = new import0.NgModuleFactory(MdIconModuleInjector,import1.MdIconModule);
var renderType_MdIcon_Host:import10.RenderComponentType = (null as any);
class _View_MdIcon_Host0 extends import11.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import12.AppElement;
  _MdIcon_0_4:import1.MdIcon;
  constructor(viewUtils:import13.ViewUtils,parentInjector:import7.Injector,declarationEl:import12.AppElement) {
    super(_View_MdIcon_Host0,renderType_MdIcon_Host,import14.ViewType.HOST,viewUtils,parentInjector,declarationEl,import15.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import12.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-icon',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'role','img');
    this._appEl_0 = new import12.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdIcon0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdIcon_0_4 = new import1.MdIcon(new import16.ElementRef(this._el_0),this.renderer,this.parentInjector.get(import17.MdIconRegistry));
    this._appEl_0.initComponent(this._MdIcon_0_4,[],compView_0);
    compView_0.create(this._MdIcon_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdIcon) && (0 === requestNodeIndex))) { return this._MdIcon_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._MdIcon_0_4.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) { this._MdIcon_0_4.ngAfterViewChecked(); }
  }
}
function viewFactory_MdIcon_Host0(viewUtils:import13.ViewUtils,parentInjector:import7.Injector,declarationEl:import12.AppElement):import11.AppView<any> {
  if ((renderType_MdIcon_Host === (null as any))) { (renderType_MdIcon_Host = viewUtils.createRenderComponentType('',0,import18.ViewEncapsulation.None,[],{})); }
  return new _View_MdIcon_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdIconNgFactory:import19.ComponentFactory<import1.MdIcon> = new import19.ComponentFactory<import1.MdIcon>('md-icon',viewFactory_MdIcon_Host0,import1.MdIcon);
const styles_MdIcon:any[] = [import20.styles];
var renderType_MdIcon:import10.RenderComponentType = (null as any);
class _View_MdIcon0 extends import11.AppView<import1.MdIcon> {
  constructor(viewUtils:import13.ViewUtils,parentInjector:import7.Injector,declarationEl:import12.AppElement) {
    super(_View_MdIcon0,renderType_MdIcon,import14.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import15.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import12.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.renderer.projectNodes(parentRenderNode,import13.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this.init([],[],[],[]);
    return (null as any);
  }
}
export function viewFactory_MdIcon0(viewUtils:import13.ViewUtils,parentInjector:import7.Injector,declarationEl:import12.AppElement):import11.AppView<import1.MdIcon> {
  if ((renderType_MdIcon === (null as any))) { (renderType_MdIcon = viewUtils.createRenderComponentType('',1,import18.ViewEncapsulation.None,styles_MdIcon,{})); }
  return new _View_MdIcon0(viewUtils,parentInjector,declarationEl);
}