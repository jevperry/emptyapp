/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/tooltip/tooltip';
import * as import2 from '@angular/material/core/portal/portal-directives';
import * as import3 from '@angular/material/core/overlay/overlay-directives';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/render/api';
import * as import6 from '@angular/core/src/linker/view';
import * as import7 from '@angular/core/src/linker/element';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/change_detection/change_detection';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from './tooltip.css.shim';
class MdTooltipModuleInjector extends import0.NgModuleInjector<import1.MdTooltipModule> {
  _PortalModule_0:import2.PortalModule;
  _OverlayModule_1:import3.OverlayModule;
  _MdTooltipModule_2:import1.MdTooltipModule;
  constructor(parent:import4.Injector) {
    super(parent,[TooltipComponentNgFactory],[]);
  }
  createInternal():import1.MdTooltipModule {
    this._PortalModule_0 = new import2.PortalModule();
    this._OverlayModule_1 = new import3.OverlayModule();
    this._MdTooltipModule_2 = new import1.MdTooltipModule();
    return this._MdTooltipModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.PortalModule)) { return this._PortalModule_0; }
    if ((token === import3.OverlayModule)) { return this._OverlayModule_1; }
    if ((token === import1.MdTooltipModule)) { return this._MdTooltipModule_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdTooltipModuleNgFactory:import0.NgModuleFactory<import1.MdTooltipModule> = new import0.NgModuleFactory(MdTooltipModuleInjector,import1.MdTooltipModule);
var renderType_TooltipComponent_Host:import5.RenderComponentType = (null as any);
class _View_TooltipComponent_Host0 extends import6.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import7.AppElement;
  _TooltipComponent_0_4:import1.TooltipComponent;
  constructor(viewUtils:import8.ViewUtils,parentInjector:import4.Injector,declarationEl:import7.AppElement) {
    super(_View_TooltipComponent_Host0,renderType_TooltipComponent_Host,import9.ViewType.HOST,viewUtils,parentInjector,declarationEl,import10.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-tooltip-component',rootSelector,(null as any));
    this._appEl_0 = new import7.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_TooltipComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._TooltipComponent_0_4 = new import1.TooltipComponent();
    this._appEl_0.initComponent(this._TooltipComponent_0_4,[],compView_0);
    compView_0.create(this._TooltipComponent_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.TooltipComponent) && (0 === requestNodeIndex))) { return this._TooltipComponent_0_4; }
    return notFoundResult;
  }
}
function viewFactory_TooltipComponent_Host0(viewUtils:import8.ViewUtils,parentInjector:import4.Injector,declarationEl:import7.AppElement):import6.AppView<any> {
  if ((renderType_TooltipComponent_Host === (null as any))) { (renderType_TooltipComponent_Host = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,[],{})); }
  return new _View_TooltipComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const TooltipComponentNgFactory:import12.ComponentFactory<import1.TooltipComponent> = new import12.ComponentFactory<import1.TooltipComponent>('md-tooltip-component',viewFactory_TooltipComponent_Host0,import1.TooltipComponent);
const styles_TooltipComponent:any[] = [import13.styles];
var renderType_TooltipComponent:import5.RenderComponentType = (null as any);
class _View_TooltipComponent0 extends import6.AppView<import1.TooltipComponent> {
  _el_0:any;
  _text_1:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import8.ViewUtils,parentInjector:import4.Injector,declarationEl:import7.AppElement) {
    super(_View_TooltipComponent0,renderType_TooltipComponent,import9.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import10.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-tooltip');
    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));
    this._expr_0 = import10.UNINITIALIZED;
    this.init([],[
      this._el_0,
      this._text_1
    ]
    ,[],[]);
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = import8.interpolate(1,'',this.context.message,'');
    if (import8.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setText(this._text_1,currVal_0);
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_TooltipComponent0(viewUtils:import8.ViewUtils,parentInjector:import4.Injector,declarationEl:import7.AppElement):import6.AppView<import1.TooltipComponent> {
  if ((renderType_TooltipComponent === (null as any))) { (renderType_TooltipComponent = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.Emulated,styles_TooltipComponent,{})); }
  return new _View_TooltipComponent0(viewUtils,parentInjector,declarationEl);
}