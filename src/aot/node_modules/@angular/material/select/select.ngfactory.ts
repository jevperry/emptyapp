/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '@angular/material/select/select';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from './select.css';
var renderType_MdSelect_Host:import0.RenderComponentType = (null as any);
class _View_MdSelect_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _MdSelect_0_4:import3.MdSelect;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdSelect_Host0,renderType_MdSelect_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-select',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdSelect0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdSelect_0_4 = new import3.MdSelect();
    this._appEl_0.initComponent(this._MdSelect_0_4,[],compView_0);
    compView_0.create(this._MdSelect_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.MdSelect) && (0 === requestNodeIndex))) { return this._MdSelect_0_4; }
    return notFoundResult;
  }
}
function viewFactory_MdSelect_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_MdSelect_Host === (null as any))) { (renderType_MdSelect_Host = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,[],{})); }
  return new _View_MdSelect_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdSelectNgFactory:import9.ComponentFactory<import3.MdSelect> = new import9.ComponentFactory<import3.MdSelect>('md-select',viewFactory_MdSelect_Host0,import3.MdSelect);
const styles_MdSelect:any[] = [import10.styles];
var renderType_MdSelect:import0.RenderComponentType = (null as any);
class _View_MdSelect0 extends import1.AppView<import3.MdSelect> {
  _text_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdSelect0,renderType_MdSelect,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'I\'m a select!',(null as any));
    this.init([],[this._text_0],[],[]);
    return (null as any);
  }
}
export function viewFactory_MdSelect0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.MdSelect> {
  if ((renderType_MdSelect === (null as any))) { (renderType_MdSelect = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,styles_MdSelect,{})); }
  return new _View_MdSelect0(viewUtils,parentInjector,declarationEl);
}