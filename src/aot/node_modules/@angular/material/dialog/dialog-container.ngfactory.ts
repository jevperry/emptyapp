/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '@angular/material/dialog/dialog-container';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/zone/ng_zone';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './dialog-container.css';
import * as import12 from '@angular/core/src/linker/query_list';
import * as import13 from '@angular/material/core/a11y/focus-trap';
import * as import14 from '@angular/material/core/portal/portal-directives';
import * as import15 from '../core/a11y/focus-trap.ngfactory';
import * as import16 from '@angular/material/core/a11y/interactivity-checker';
import * as import17 from '@angular/core/src/linker/template_ref';
import * as import18 from '@angular/core/src/linker/component_factory_resolver';
var renderType_MdDialogContainer_Host:import0.RenderComponentType = (null as any);
class _View_MdDialogContainer_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _MdDialogContainer_0_4:import3.MdDialogContainer;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdDialogContainer_Host0,renderType_MdDialogContainer_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('md-dialog-container',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','md-dialog-container');
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_MdDialogContainer0(this.viewUtils,this.injector(0),this._appEl_0);
    this._MdDialogContainer_0_4 = new import3.MdDialogContainer(this.parentInjector.get(import8.NgZone));
    this._appEl_0.initComponent(this._MdDialogContainer_0_4,[],compView_0);
    compView_0.create(this._MdDialogContainer_0_4,this.projectableNodes,(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_0,'keydown.escape',this.eventHandler(this._handle_keydown_escape_0_0.bind(this)));
    this._expr_1 = import7.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[disposable_0],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.MdDialogContainer) && (0 === requestNodeIndex))) { return this._MdDialogContainer_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_1:any = ((this._MdDialogContainer_0_4.dialogConfig == (null as any))? (null as any): this._MdDialogContainer_0_4.dialogConfig.role);
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementAttribute(this._el_0,'role',((currVal_1 == (null as any))? (null as any): currVal_1.toString()));
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._MdDialogContainer_0_4.ngOnDestroy();
  }
  private _handle_keydown_escape_0_0($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdDialogContainer_0_4.handleEscapeKey()) !== false);
    return (true && pd_0);
  }
}
function viewFactory_MdDialogContainer_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_MdDialogContainer_Host === (null as any))) { (renderType_MdDialogContainer_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_MdDialogContainer_Host0(viewUtils,parentInjector,declarationEl);
}
export const MdDialogContainerNgFactory:import10.ComponentFactory<import3.MdDialogContainer> = new import10.ComponentFactory<import3.MdDialogContainer>('md-dialog-container',viewFactory_MdDialogContainer_Host0,import3.MdDialogContainer);
const styles_MdDialogContainer:any[] = [import11.styles];
var renderType_MdDialogContainer:import0.RenderComponentType = (null as any);
class _View_MdDialogContainer0 extends import1.AppView<import3.MdDialogContainer> {
  _viewQuery_PortalHostDirective_0:import12.QueryList<any>;
  _viewQuery_FocusTrap_1:import12.QueryList<any>;
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _FocusTrap_0_4:import13.FocusTrap;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _appEl_2:import2.AppElement;
  _TemplateRef_2_5:any;
  _PortalHostDirective_2_6:import14.PortalHostDirective;
  _text_3:any;
  _text_4:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdDialogContainer0,renderType_MdDialogContainer,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._viewQuery_PortalHostDirective_0 = new import12.QueryList<any>();
    this._viewQuery_FocusTrap_1 = new import12.QueryList<any>();
    this._el_0 = this.renderer.createElement(parentRenderNode,'focus-trap',(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = import15.viewFactory_FocusTrap0(this.viewUtils,this.injector(0),this._appEl_0);
    this._FocusTrap_0_4 = new import13.FocusTrap(this.parentInjector.get(import16.InteractivityChecker));
    this._appEl_0.initComponent(this._FocusTrap_0_4,[],compView_0);
    this._text_1 = this.renderer.createText((null as any),'\n  ',(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor((null as any),(null as any));
    this._appEl_2 = new import2.AppElement(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import17.TemplateRef_(this._appEl_2,viewFactory_MdDialogContainer1);
    this._PortalHostDirective_2_6 = new import14.PortalHostDirective(this.parentInjector.get(import18.ComponentFactoryResolver),this._appEl_2.vcRef);
    this._text_3 = this.renderer.createText((null as any),'\n',(null as any));
      compView_0.create(this._FocusTrap_0_4,[[].concat([
        this._text_1,
        this._appEl_2,
        this._text_3
      ]
    )],(null as any));
    this._text_4 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._expr_0 = import7.UNINITIALIZED;
    this._viewQuery_PortalHostDirective_0.reset([this._PortalHostDirective_2_6]);
    this.context._portalHost = this._viewQuery_PortalHostDirective_0.first;
    this._viewQuery_FocusTrap_1.reset([this._FocusTrap_0_4]);
    this.context._focusTrap = this._viewQuery_FocusTrap_1.first;
    this.init([],[
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3,
      this._text_4
    ]
    ,[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import14.PortalHostDirective) && (2 === requestNodeIndex))) { return this._PortalHostDirective_2_6; }
    if (((token === import13.FocusTrap) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._FocusTrap_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = '';
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._PortalHostDirective_2_6.portal = currVal_0;
      this._expr_0 = currVal_0;
    }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_MdDialogContainer0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.MdDialogContainer> {
  if ((renderType_MdDialogContainer === (null as any))) { (renderType_MdDialogContainer = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,styles_MdDialogContainer,{})); }
  return new _View_MdDialogContainer0(viewUtils,parentInjector,declarationEl);
}
class _View_MdDialogContainer1 extends import1.AppView<any> {
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_MdDialogContainer1,renderType_MdDialogContainer,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this.init([],[],[],[]);
    return (null as any);
  }
}
function viewFactory_MdDialogContainer1(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  return new _View_MdDialogContainer1(viewUtils,parentInjector,declarationEl);
}