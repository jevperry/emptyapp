/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '@angular/material/core/a11y/focus-trap';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/material/core/a11y/interactivity-checker';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/core/src/linker/query_list';
import * as import12 from '@angular/core/src/linker/element_ref';
var renderType_FocusTrap_Host:import0.RenderComponentType = (null as any);
class _View_FocusTrap_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _FocusTrap_0_4:import3.FocusTrap;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_FocusTrap_Host0,renderType_FocusTrap_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('focus-trap',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_FocusTrap0(this.viewUtils,this.injector(0),this._appEl_0);
    this._FocusTrap_0_4 = new import3.FocusTrap(this.parentInjector.get(import8.InteractivityChecker));
    this._appEl_0.initComponent(this._FocusTrap_0_4,[],compView_0);
    compView_0.create(this._FocusTrap_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.FocusTrap) && (0 === requestNodeIndex))) { return this._FocusTrap_0_4; }
    return notFoundResult;
  }
}
function viewFactory_FocusTrap_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_FocusTrap_Host === (null as any))) { (renderType_FocusTrap_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_FocusTrap_Host0(viewUtils,parentInjector,declarationEl);
}
export const FocusTrapNgFactory:import10.ComponentFactory<import3.FocusTrap> = new import10.ComponentFactory<import3.FocusTrap>('focus-trap',viewFactory_FocusTrap_Host0,import3.FocusTrap);
const styles_FocusTrap:any[] = [];
var renderType_FocusTrap:import0.RenderComponentType = (null as any);
class _View_FocusTrap0 extends import1.AppView<import3.FocusTrap> {
  _viewQuery_trappedContent_0:import11.QueryList<any>;
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _el_5:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_FocusTrap0,renderType_FocusTrap,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._viewQuery_trappedContent_0 = new import11.QueryList<any>();
    this._text_0 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'tabindex','0');
    this._text_2 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this._el_3 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.projectNodes(this._el_3,import4.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_4 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this._el_5 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_5,'tabindex','0');
    var disposable_0:Function = this.renderer.listen(this._el_1,'focus',this.eventHandler(this._handle_focus_1_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_5,'focus',this.eventHandler(this._handle_focus_5_0.bind(this)));
    this._viewQuery_trappedContent_0.reset([new import12.ElementRef(this._el_3)]);
    this.context.trappedContent = this._viewQuery_trappedContent_0.first;
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5
    ]
    ,[
      disposable_0,
      disposable_1
    ]
    ,[]);
    return (null as any);
  }
  private _handle_focus_1_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.focusLastTabbableElement()) !== false);
    return (true && pd_0);
  }
  private _handle_focus_5_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.focusFirstTabbableElement()) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_FocusTrap0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.FocusTrap> {
  if ((renderType_FocusTrap === (null as any))) { (renderType_FocusTrap = viewUtils.createRenderComponentType('',1,import9.ViewEncapsulation.None,styles_FocusTrap,{})); }
  return new _View_FocusTrap0(viewUtils,parentInjector,declarationEl);
}